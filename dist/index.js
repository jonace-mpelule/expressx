#! /usr/bin/env node
import c from"yargs";import{hideBin as p}from"yargs/helpers";import a from"chalk";import o from"inquirer";import{createSpinner as l}from"nanospinner";var s=c(p(process.argv)).argv,e=null;process.on("SIGINT",()=>{e&&e.stop({text:"Process interrupted",mark:"\u{1F4A5}"}),console.log(a.redBright.bold(`
\u274C Process interrupted (Ctrl+C)`)),process.exit(0)});async function u(){let t=s._[0],i=s._[1];t=="init"?await d():t=="add"&&i=="route"?m():process.exit(1)}async function m(){console.log(a.green("Adding route..."))}async function d(){let t=s._[1],i=s._[2],r=s._[3];t||(t=(await o.prompt([{type:"input",name:"projectName",message:"What is your project name?"}])).projectName),i||(i=(await o.prompt([{type:"list",name:"template",message:"What template would you like to use?",choices:[{name:"Basic - Minimal Express setup with TS",value:"basic"},{name:"CRUD API - With validation and error handling",value:"crud-api"},{name:"Auth API - JWT auth, login & register",value:"auth-api"},{name:"Modular API - Feature-first folder structure",value:"modular-api"},{name:"Swagger API - Auto docs with OpenAPI",value:"swagger-api"}]}])).template),r||(r=(await o.prompt([{type:"confirm",name:"installDependencies",message:"Would you like to install dependencies?",default:!0}])).installDependencies),console.log(a.green(`
\u{1F680} Creating project ${a.cyan(t)} with template ${a.yellow(i)}
`)),e=l("Scaffolding your project...").start(),await new Promise(n=>setTimeout(n,2e3)),e.success({text:"Project scaffolded!"}),e=null,r&&(e=l("Installing dependencies...").start(),await new Promise(n=>setTimeout(n,2e3)),e.success({text:"Dependencies installed!"}),e=null),console.log(a.greenBright(`
\u2705 All done! Happy coding!
`))}await u();
//# sourceMappingURL=index.js.map
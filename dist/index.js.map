{"version":3,"sources":["../src/cli/index.ts"],"sourcesContent":["#! /usr/bin/env node\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport { createSpinner, Spinner } from \"nanospinner\";\n\nconst argv = yargs(hideBin(process.argv)).argv;\n\n// Track active spinner globally\nlet activeSpinner: Spinner | null = null;\n\n// Handle Ctrl+C gracefully\nprocess.on(\"SIGINT\", () => {\n  if (activeSpinner) {\n    activeSpinner.stop({ text: \"Process interrupted\", mark: \"💥\" });\n  }\n  console.log(chalk.redBright.bold(\"\\n❌ Process interrupted (Ctrl+C)\"));\n  process.exit(0);\n});\n\nasync function main() {\n  const firstArg = (argv as any)._[0];\n  const secondArg = (argv as any)._[1];\n\n  if (firstArg == \"init\") {\n    await init();\n  } else if (firstArg == \"add\" && secondArg == \"route\") {\n    addRoute();\n  } else {\n    process.exit(1);\n  }\n}\n\nasync function addRoute() {\n  console.log(chalk.green(\"Adding route...\"));\n}\n\nasync function init() {\n  let projectName = (argv as any)._[1];\n  let template = (argv as any)._[2];\n  let installDependencies = (argv as any)._[3];\n\n  if (!projectName) {\n    const result = await inquirer.prompt([\n      {\n        type: \"input\",\n        name: \"projectName\",\n        message: \"What is your project name?\",\n      },\n    ]);\n    projectName = result.projectName;\n  }\n\n  if (!template) {\n    const result = await inquirer.prompt([\n      {\n        type: \"list\",\n        name: \"template\",\n        message: \"What template would you like to use?\",\n        choices: [\n          {\n            name: \"Basic - Minimal Express setup with TS\",\n            value: \"basic\",\n          },\n          {\n            name: \"CRUD API - With validation and error handling\",\n            value: \"crud-api\",\n          },\n          {\n            name: \"Auth API - JWT auth, login & register\",\n            value: \"auth-api\",\n          },\n          {\n            name: \"Modular API - Feature-first folder structure\",\n            value: \"modular-api\",\n          },\n          {\n            name: \"Swagger API - Auto docs with OpenAPI\",\n            value: \"swagger-api\",\n          },\n        ],\n      },\n    ]);\n    template = result.template;\n  }\n\n  if (!installDependencies) {\n    const result = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"installDependencies\",\n        message: \"Would you like to install dependencies?\",\n        default: true,\n      },\n    ]);\n    installDependencies = result.installDependencies;\n  }\n\n  console.log(\n    chalk.green(\n      `\\n🚀 Creating project ${chalk.cyan(\n        projectName\n      )} with template ${chalk.yellow(template)}\\n`\n    )\n  );\n\n  // Simulate spinner step (safe exit aware)\n  activeSpinner = createSpinner(\"Scaffolding your project...\").start();\n  await new Promise((resolve) => setTimeout(resolve, 2000)); // simulate delay\n  activeSpinner.success({ text: \"Project scaffolded!\" });\n  activeSpinner = null;\n\n  if (installDependencies) {\n    activeSpinner = createSpinner(\"Installing dependencies...\").start();\n    await new Promise((resolve) => setTimeout(resolve, 2000)); // simulate install\n    activeSpinner.success({ text: \"Dependencies installed!\" });\n    activeSpinner = null;\n  }\n\n  console.log(chalk.greenBright(\"\\n✅ All done! Happy coding!\\n\"));\n}\n\nawait main();\n"],"mappings":";AACA,OAAOA,MAAW,QAClB,OAAS,WAAAC,MAAe,gBACxB,OAAOC,MAAW,QAClB,OAAOC,MAAc,WACrB,OAAS,iBAAAC,MAA8B,cAEvC,IAAMC,EAAOL,EAAMC,EAAQ,QAAQ,IAAI,CAAC,EAAE,KAGtCK,EAAgC,KAGpC,QAAQ,GAAG,SAAU,IAAM,CACrBA,GACFA,EAAc,KAAK,CAAE,KAAM,sBAAuB,KAAM,WAAK,CAAC,EAEhE,QAAQ,IAAIJ,EAAM,UAAU,KAAK;AAAA,oCAAkC,CAAC,EACpE,QAAQ,KAAK,CAAC,CAChB,CAAC,EAED,eAAeK,GAAO,CACpB,IAAMC,EAAYH,EAAa,EAAE,CAAC,EAC5BI,EAAaJ,EAAa,EAAE,CAAC,EAE/BG,GAAY,OACd,MAAME,EAAK,EACFF,GAAY,OAASC,GAAa,QAC3CE,EAAS,EAET,QAAQ,KAAK,CAAC,CAElB,CAEA,eAAeA,GAAW,CACxB,QAAQ,IAAIT,EAAM,MAAM,iBAAiB,CAAC,CAC5C,CAEA,eAAeQ,GAAO,CACpB,IAAIE,EAAeP,EAAa,EAAE,CAAC,EAC/BQ,EAAYR,EAAa,EAAE,CAAC,EAC5BS,EAAuBT,EAAa,EAAE,CAAC,EAEtCO,IAQHA,GAPe,MAAMT,EAAS,OAAO,CACnC,CACE,KAAM,QACN,KAAM,cACN,QAAS,4BACX,CACF,CAAC,GACoB,aAGlBU,IA8BHA,GA7Be,MAAMV,EAAS,OAAO,CACnC,CACE,KAAM,OACN,KAAM,WACN,QAAS,uCACT,QAAS,CACP,CACE,KAAM,wCACN,MAAO,OACT,EACA,CACE,KAAM,gDACN,MAAO,UACT,EACA,CACE,KAAM,wCACN,MAAO,UACT,EACA,CACE,KAAM,+CACN,MAAO,aACT,EACA,CACE,KAAM,uCACN,MAAO,aACT,CACF,CACF,CACF,CAAC,GACiB,UAGfW,IASHA,GARe,MAAMX,EAAS,OAAO,CACnC,CACE,KAAM,UACN,KAAM,sBACN,QAAS,0CACT,QAAS,EACX,CACF,CAAC,GAC4B,qBAG/B,QAAQ,IACND,EAAM,MACJ;AAAA,6BAAyBA,EAAM,KAC7BU,CACF,CAAC,kBAAkBV,EAAM,OAAOW,CAAQ,CAAC;AAAA,CAC3C,CACF,EAGAP,EAAgBF,EAAc,6BAA6B,EAAE,MAAM,EACnE,MAAM,IAAI,QAASW,GAAY,WAAWA,EAAS,GAAI,CAAC,EACxDT,EAAc,QAAQ,CAAE,KAAM,qBAAsB,CAAC,EACrDA,EAAgB,KAEZQ,IACFR,EAAgBF,EAAc,4BAA4B,EAAE,MAAM,EAClE,MAAM,IAAI,QAASW,GAAY,WAAWA,EAAS,GAAI,CAAC,EACxDT,EAAc,QAAQ,CAAE,KAAM,yBAA0B,CAAC,EACzDA,EAAgB,MAGlB,QAAQ,IAAIJ,EAAM,YAAY;AAAA;AAAA,CAA+B,CAAC,CAChE,CAEA,MAAMK,EAAK","names":["yargs","hideBin","chalk","inquirer","createSpinner","argv","activeSpinner","main","firstArg","secondArg","init","addRoute","projectName","template","installDependencies","resolve"]}